# Copyright (c) 2015-2016 Hanspeter Portner (dev@open-music-kontrollers.ch)
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the Artistic License 2.0 as published by
# The Perl Foundation.
#
# This source is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Artistic License 2.0 for more details.
#
# You should have received a copy of the Artistic License 2.0
# along the source as a COPYING file. If not, obtain it from
# http://www.perlfoundation.org/artistic_license_2_0.

@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix atom: <http://lv2plug.in/ns/ext/atom#> .
@prefix lv2: <http://lv2plug.in/ns/lv2core#> .
@prefix pset: <http://lv2plug.in/ns/ext/presets#> .
@prefix midi: <http://lv2plug.in/ns/ext/midi#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix state: <http://lv2plug.in/ns/ext/state#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix moony: <http://open-music-kontrollers.ch/lv2/moony#> .
@prefix lic: <http://opensource.org/licenses/> .
@prefix stateR: <urn:moony:stateR#> .

# to please sord_validate
moony:code
	a rdf:Property ;
	rdfs:label "Lua code chunk" .
moony:state
	a rdf:Property ;
	rdfs:label "Lua code state" .

stateR:pBool
	a lv2:Parameter ;
	rdfs:label "A Bool" ;
	rdfs:range atom:Bool .
stateR:pChunk
	a lv2:Parameter ;
	rdfs:label "A Chunk" ;
	rdfs:range atom:Chunk .
stateR:pEnum
	a lv2:Parameter ;
	rdfs:label "An Enum" ;
	rdfs:range atom:Int .
stateR:pFloat
	a lv2:Parameter ;
	rdfs:label "A Float" ;
	rdfs:range atom:Float .
stateR:pInt
	a lv2:Parameter ;
	rdfs:label "An Int" ;
	rdfs:range atom:Int .
stateR:pPath
	a lv2:Parameter ;
	rdfs:label "A Path" ;
	rdfs:range atom:Path .
stateR:pString
	a lv2:Parameter ;
	rdfs:label "A String" ;
	rdfs:range atom:String .
stateR:pURID
	a lv2:Parameter ;
	rdfs:label "A URID" ;
	rdfs:range atom:URI .

moony:bank-through_control-through
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, ...)
	return ...
end"""
	] .

moony:bank-through_atom-through
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, seq, forge, ...)
	for frames, atom in seq:foreach() do
		forge:time(frames):atom(atom)
	end

	return ...
end"""
	] .

moony:bank-through_atom-through2
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, seq1, forge1, seq2, forge2)
	for frames, atom in seq1:foreach() do
		forge1:time(frames):atom(atom)
	end

	for frames, atom in seq2:foreach() do
		forge2:time(frames):atom(atom)
	end
end"""
	] .

moony:bank-through_atom-through4
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, seq1, forge1, seq2, forge2, seq3, forge3, seq4, forge4)
	for frames, atom in seq1:foreach() do
		forge1:time(frames):atom(atom)
	end

	for frames, atom in seq2:foreach() do
		forge2:time(frames):atom(atom)
	end

	for frames, atom in seq3:foreach() do
		forge3:time(frames):atom(atom)
	end

	for frames, atom in seq4:foreach() do
		forge4:time(frames):atom(atom)
	end
end"""
	] .

moony:bank-multiplex_atom-multiplex2
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, seq1, forge1, seq2, forge2)
	for frames, atom in seq1:foreach(seq2) do
		forge1:time(frames):atom(atom)
		forge2:time(frames):atom(atom)
	end
end"""
	] .

moony:bank-multiplex_atom-multiplex4
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """function run(n, control, notify, seq1, forge1, seq2, forge2, seq3, forge3, seq4, forge4)
	for frames, atom in seq1:foreach(seq2, seq3, seq4) do
		forge1:time(frames):atom(atom)
		forge2:time(frames):atom(atom)
		forge3:time(frames):atom(atom)
		forge4:time(frames):atom(atom)
	end
end"""
	] .

moony:bank-midi_midi-responder
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """local midiR = MIDIResponder({
	[MIDI.NoteOn] = function(self, frames, forge, chan, note, vel)
		forge:time(frames):midi(MIDI.NoteOn | chan, note, vel)
	end,
	[MIDI.NoteOff] = function(self, frames, forge, chan, note, vel)
		forge:time(frames):midi(MIDI.NoteOff | chan, note, vel)
	end
})

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do
		local handled = midiR(frames, forge, atom)
	end
end"""
	] .

moony:bank-time_midi-sequencer
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """local timeR = TimeResponder({
  [Time.speed] = function(self, frames, forge, speed)
    self.rolling = speed > 0.0
    if not self.rolling and forge then
      forge:time(frames):midi(MIDI.Controller, MIDI.AllNotesOff)
    end
  end,
  [Time.barBeat] = function(self, frames, forge, bar_beat)
    if self.rolling and forge then
      forge:time(frames):midi(MIDI.NoteOff, 24, 0x7f)
      forge:time(frames):midi(MIDI.NoteOn, 24, 0x7f)
    end
  end,
  [Time.bar] = function(self, frames, forge, bar)
    if self.rolling and forge then
      forge:time(frames):midi(MIDI.NoteOff, 48, 0x7f)
      forge:time(frames):midi(MIDI.NoteOn, 48, 0x7f)
    end
  end,
  rolling = false
})

function stash(forge)
  timeR:stash(forge)
end

function apply(atom)
  timeR:apply(atom)
end

function run(n, control, notify, seq, forge)
  local from = 0
  for frames, atom in seq:foreach() do
    timeR(from, frames, forge, atom)
    from = frames
  end
  timeR(from, n, forge)
end"""
	] .

moony:bank-osc_osc-responder
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """local oscR = OSCResponder({
	['/ping'] = function(self, frames, forge, fmt, ...)
		forge:time(frames):message('/pong', fmt, ...)
	end,
	['/pong'] = function(self, frames, forge, fmt, ...)
		forge:time(frames):message('/ping', fmt, ...)
	end
})

function run(n, control, notify, seq, forge)
  for frames, atom in seq:foreach() do
    local handled = oscR(frames, forge, atom)
  end
end"""
	] .

moony:bank-state_state-responder
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """local urid = HashMap('urn:moony:stateR#')

local pLong
local pInt = {
  [RDFS.label] = 'Integer',
  [RDFS.comment] = 'This is an Integer',
  [RDFS.range] = Atom.Int,
  [Units.unit] = Units.hz,
  [Core.minimum] = 0,
  [Core.maximum] = 10,
  [RDF.value] = 5,
  [Patch.Set] = function(self, frames, forge, value)
    self[RDF.value] = value
    pLong[RDF.value] = value * 2
    if forge then
      forge:time(frames):set(nil, urid.pLong):long(pLong[RDF.value]):pop()
    end
  end
}

pLong = {
  [RDFS.label] = 'Long',
  [RDFS.comment] = 'This is a Long',
  [RDFS.range] = Atom.Long,
  [Units.unit] = Units.hz,
  [Core.minimum] = pInt[Core.minimum] * 2,
  [Core.maximum] = pInt[Core.maximum] * 2,
  [RDF.value] = pInt[RDF.value] * 2
}

local pDouble
local pFloat = {
  [RDFS.label] = 'Float',
  [RDFS.comment] = 'This is a Float',
  [RDFS.range] = Atom.Float,
  [Units.unit] = Units.m,
  [Core.minimum] = -1.0,
  [Core.maximum] = 1.0,
  [RDF.value] = 0.0,
  [Patch.Set] = function(self, frames, forge, value)
    self[RDF.value] = value
    pDouble[RDF.value] = value * 2
    if forge then
      forge:time(frames):set(nil, urid.pDouble):double(pDouble[RDF.value]):pop()
    end
  end
}

pDouble = {
  [RDFS.label] = 'Double',
  [RDFS.comment] = 'This is a Double',
  [RDFS.range] = Atom.Double,
  [Units.unit] = Units.m,
  [Core.minimum] = pFloat[Core.minimum] * 2,
  [Core.maximum] = pFloat[Core.maximum] * 2,
  [RDF.value] = pFloat[RDF.value] * 2
}

local pBool = {
  [RDFS.label] = 'Bool',
  [RDFS.comment] = 'This is a Boolean',
  [RDFS.range] = Atom.Bool,
  [RDF.value] = true
}

local pURI
local pURID = {
  [RDFS.label] = 'URID',
  [RDFS.comment] = 'This is an URID',
  [RDFS.range] = Atom.URID,
  [RDF.value] = MIDI.MidiEvent,
  [Patch.Set] = function(self, frames, forge, value)
    self[RDF.value] = value
    pURI[RDF.value] = Unmap[value]
    if forge then
      forge:time(frames):set(nil, urid.pURI):uri(pURI[RDF.value]):pop()
    end
  end
}

pURI = {
  [RDFS.label] = 'URI',
  [RDFS.comment] = 'This is an URI',
  [RDFS.range] = Atom.URI,
  [RDF.value] = Unmap(MIDI.MidiEvent)
}

local pString = {
  [RDFS.label] = 'String',
  [RDFS.comment] = 'This is a String',
  [RDFS.range] = Atom.String,
  [RDF.value] = 'hello world'
}

local pChunk = {
  [RDFS.label] = 'Chunk',
  [RDFS.comment] = 'This is a Chunk',
  [RDFS.range] = Atom.Chunk,
  [RDF.value] = string.char(0x1, 0x2, 0x3),
  [Patch.Set] = function(self, frames, forge, value)
    self[RDF.value] = value
    for i = 1, #value do
      print(i, string.byte(value, i))
    end
  end
}

local pPath = {
  [RDFS.label] = 'Path',
  [RDFS.comment] = 'This is a Path',
  [RDFS.range] = Atom.Path,
  [RDF.value] = '/tmp/file.suffix'
}

local pEnum = {
  [RDFS.label] = 'Enum',
  [RDFS.comment] = 'This is an Enum',
  [RDFS.range] = Atom.Int,
  [RDF.value] = 0,
  [Core.minimum] = 0,
  [Core.maximum] = 2,
  [Core.scalePoint] = {
    zero = 0,
    one = 1,
    two = 2
  }
}

local stateR = StateResponder({
  [Patch.writable] = {
    [urid.pInt] = pInt,
    [urid.pFloat] = pFloat,
    [urid.pBool] = pBool,
    [urid.pURID] = pURID,
    [urid.pString] = pString,
    [urid.pChunk] = pChunk,
    [urid.pPath] = pPath,
    [urid.pEnum] = pEnum
  },
  [Patch.readable] = {
    [urid.pLong] = pLong,
    [urid.pDouble] = pDouble,
    [urid.pURI] = pURI
  }
})

function save(forge)
  stateR:stash(forge)
end

function restore(atom)
  stateR:apply(atom)
  pLong[RDF.value] = pInt[RDF.value] * 2
  pDouble[RDF.value] = pFloat[RDF.value] * 2
  pURI[RDF.value] = Unmap[pURID[RDF.value]]
end

function once(n, control, notify)
  stateR:register(0, notify)
end

function run(n, control, notify)
  for frames, atom in control:foreach() do
    stateR(frames, notify, atom)
  end
end""" ;
		moony:state [
			stateR:pBool true ;
			stateR:pChunk "AQIDBAUGBw=="^^xsd:base64Binary ;
			stateR:pEnum 0 ;
			stateR:pFloat "8e-1"^^xsd:float ;
			stateR:pInt 9 ;
			stateR:pPath <file:///tmp/file.suffix> ;
			stateR:pString "world hello" ;
			stateR:pURID <http://lv2plug.in/ns/ext/midi#MidiEvent>
		]
	] .

moony:bank-tutorial_part-1
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Tutorial 1: MIDI Channel Blocker

-- define table which holds active MIDI channels
local channels = {0, 2, 4, 6}

-- derive channel mask based on active channels
local mask = 0 -- block everything
for i, v in ipairs(channels) do
	mask = mask | (1 << v) -- toggle bit of active channel
end

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local block = false -- assume a not-to-be-blocked event by default

		if atom.type == MIDI.MidiEvent then -- check for MIDI message
			local msg = atom[1] -- get first MIDI byte
			local cmd = msg & 0xf0 -- get MIDI command nibble
			local chn = msg & 0x0f -- get MIDI channel nibble

			if (cmd ~= 0xf0) and ((1 << chn) & mask == 0) then
				block = true -- if not a system message and channel not part of mask
			end
		end

		if not block then -- let atom through
			forge:time(frames):atom(atom) -- serialize atom as-is
		end
	end
end"""
	] .

moony:bank-tutorial_part-2
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Tutorial 2: MIDI Chorder

-- define table that holds number of chord notes and their offsets
local chord = {0, 12, 24, 36} -- octaves, obviously

-- define a general note responder factory
local function noteResponder(cmd)
	return function (self, frames, forge, chan, note, vel)
		for i, v in ipairs(chord) do -- iterate over chord offsets
			local chanNew = i - 1 -- set MIDI channel to chord index - 1
			local noteNew = note + v -- set MIDI note to chord offset
			if noteNew >= 0 and noteNew <= 0x7f then -- handle note under/overflows
				forge:time(frames):midi(cmd | chanNew, noteNew, vel) -- serialize event
			end
		end
	end
end

-- define a MIDIResponder object configured to pass-through unmatched messages
local midiR = MIDIResponder({
	[MIDI.NoteOn] = noteResponder(MIDI.NoteOn), -- create responder for NoteOn
	[MIDI.NoteOff] = noteResponder(MIDI.NoteOff), -- and NoteOff
	[MIDI.NotePressure] = noteResponder(MIDI.NotePressure) -- and NotePressure
}, true)

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = midiR(frames, forge, atom) -- call responder for event
	end
end"""
	] .

moony:bank-tutorial_part-3
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Tutorial 3: MIDI Sample & Hold

local urn = HashMap('urn:moony:tutorial-3#') -- prefix of this presets URIs
local sample = false -- flag to tell whether we are sampling or not
local noteOffs = {} -- table to store NoteOff events while sampling

-- MIDI responder for NoteOff events
local function noteOff(self, frames, forge, chan, note, vel)
	local msg = string.char(MIDI.NoteOff | chan, note, vel) -- encode to byte string

	if sample then -- are we sampling?
		table.insert(noteOffs, msg) -- add event to table, e.g. put it on-hold
	else
		forge:time(frames):midi(msg) -- let event through as-is
	end
end

-- MIDI responder for Controller events
local function controller(self, frames, forge, chan, control, value)
	if control == MIDI.SustainPedal then -- check for SustainPedal
		local newSample = value > 0 -- derive new sampling state from Controller value

		if newSample ~= sample then -- is new sampling state different from current one?
			if not newSample then -- sustain pedal has been released
				for i, msg in ipairs(noteOffs) do -- release NoteOff events on-hold
					forge:time(frames):midi(msg)
				end
				noteOffs = {} -- clear table as events have been released
			end

			sample = newSample -- update sampling state
		end
	else -- let through non-SustainPedal Controller events
		forge:time(frames):midi(MIDI.Controller | chan, control, value)
	end
end

-- define a MIDIResponder object configured to pass-through unmatched messages
local midiR = MIDIResponder({
	[MIDI.NoteOff] = noteOff, -- register NoteOff responder
	[MIDI.Controller] = controller -- register Controller responder
}, true)

-- push sampling state and events on-hold on stash
function stash(forge)
	local obj = forge:object() -- create object

	-- add boolean property for sampling state to object
	obj:key(urn.sample):bool(sample)

	-- add tuple property for events on-hold to object
	local tup = forge:key(urn.noteOffs):tuple()
	for i, msg in ipairs(noteOffs) do -- add events on-hold to tuple
		tup:midi(msg)
	end

	tup:pop() -- finalize tuple
	obj:pop() -- finalize object
end

-- pop sampling state and events on-hold from stash
function apply(atom)
	-- get sampling state from object
	if atom[urn.sample] then
		sample = atom[urn.sample].body
	end

	-- get events on-hold from object
	if atom[urn.noteOffs] then
		noteOffs = {} -- clear table
		for i, msg in atom[urn.noteOffs]:foreach() do -- iterate tuple
			noteOffs[i] = msg -- add events on-hold to table
		end
	end
end

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = midiR(frames, forge, atom) -- call responder for event
	end
end"""
	] .

moony:bank-tutorial_part-4
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Tutorial 4: MIDI Arpeggiator

local schar = string.char -- local variable is more efficient to look up

local chord = {0, 3, 7, 11} -- table with chord note offsets
local offset = 0.1 -- time offset between notes in seconds

local schedule = {} -- table to store Note events
local dur = math.floor(offset * Options[Core.sampleRate]) -- time offset in frames

-- compare function to sort scheduled messages according to frame time
local function cmp(a, b)
	return a[1] < b[1]
end

local function note_responder(cmd)
	return function(self, frames, forge, chan, note, vel)
		for i, v in ipairs(chord) do
			local chanNew = i - 1 -- set new channel to chord note index - 1
			local noteNew = note + v -- set new note to chord note offset
			local msg = schar(cmd | chanNew, noteNew, vel) -- serialize message
			local off = frames + (i-1)*dur
			table.insert(schedule, {off, msg}) -- schedule message with offset
		end
		table.sort(schedule, cmp) -- sort table
	end
end

-- define a MIDIResponder object configured to pass-through unmatched messages
local midiR = MIDIResponder({
	[MIDI.NoteOn] = note_responder(MIDI.NoteOn), -- register responder for NoteOn
	[MIDI.NoteOff] = note_responder(MIDI.NoteOff), -- and NoteOff
	[MIDI.NotePressure] = note_responder(MIDI.NotePressure) -- and NotePressure
}, true)

-- push scheduled events stash
function stash(forge)
	local seq= forge:sequence() -- create atom sequence
	for i, v in ipairs(schedule) do -- iterate over scheduled events
		seq:time(v[1]):midi(v[2]) -- add events to atom sequence
	end
	seq:pop() -- finalize atom sequence
end

-- pop scheduled events from stash
function apply(atom)
	if atom.type == Atom.Sequence then -- check for correct atom type
		schedule = {} -- clear table with scheduled events
		for off, itm in atom:foreach() do -- iteratore over sequence events
			table.insert(schedule, {off, itm.body}) -- insert event into table
		end
		table.sort(schedule, cmp) -- sort events
	end
end

-- are there any scheduled events to dispatch?
local function dispatch(n, forge)
::loop::
	for i, v in ipairs(schedule) do
		if v[1] < n then
			forge:time(v[1]):midi(v[2]) -- send message
			table.remove(schedule, i) -- remove message from scheduled events
			goto loop -- restart loop as we have removed an item
		else
			v[1] = v[1] - n -- decrease timestamp by period size
		end
	end
end

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = midiR(frames, forge, atom) -- call responder for event
	end

	dispatch(n, forge) -- dispatch scheduled events
end"""
	] .

moony:bank-tutorial_part-5
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Tutorial 5: MIDI Velocity Curve Interpolator

local X = {0, 15, 112, 127} -- X-coordinates of curve
local Y = {0,  7, 120, 127} -- Y-coordinates of curve
local N = #X -- number of points to interpolate over
local Ymin = 0 -- clip minimum
local Ymax = 127 -- clip maximum

-- Lagrange Polynomial Interpolation
local function P(x)
	local sum = 0
	for j = 1, N do
		local prod = Y[j]
		for k = 1, N do
			prod = prod * (k == j and 1.0 or (x - X[k]) / (X[j] - X[k]))
		end
		sum = sum + prod
	end
	sum = math.floor(sum) -- round to lower integer
	return sum < Ymin and Ymin or (sum > Ymax and Ymax or sum) -- clip to [Ymin, Ymax]
end

-- fill velocity curve lookup table
local curve = {}
for i = 0, 127 do
	curve[i+1] = P(i)
end

-- note responder function factory
local function note_responder(cmd)
	return function(self, frames, forge, chan, note, vel)
		local velNew = curve[vel+1] -- index velocity curve lookup table
		forge:time(frames):midi(cmd | chan, note, velNew) -- send event
	end
end

-- define a MIDIResponder object configured to pass-through unmatched messages
local midiR = MIDIResponder({
	[MIDI.NoteOn] = note_responder(MIDI.NoteOn), -- register responder for NoteOn
	[MIDI.NoteOff] = note_responder(MIDI.NoteOff) -- and NoteOff
}, true)

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = midiR(frames, forge, atom) -- call responder for event
	end
end"""
	] .

moony:bank-template_part-1
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Template 1: MIDI Responder

local block = false -- route unmatched messages as-is

-- define a MIDIResponder object
local midiR = MIDIResponder({
	-- callbacks featuring a channel parameter
	[MIDI.NoteOn] = function(self, frames, forge, chan, note, vel)
		--TODO
	end,
	[MIDI.NoteOff] = function(self, frames, forge, chan, note, vel)
		--TODO
	end,
	[MIDI.NotePressure] = function(self, frames, forge, chan, note, vel)
		--TODO
	end,
	[MIDI.Bender] = function(self, frames, forge, chan, lsb, msb)
		--TODO
	end,
	[MIDI.Controller] = function(self, frames, forge, chan, cntrl, val)
		--TODO
	end,
	[MIDI.ProgramChange] = function(self, frames, forge, chan, lsb, msb)
		--TODO
	end,
	[MIDI.ChannelPressure] = function(self, frames, forge, chan, val)
		--TODO
	end,

	-- callbacks featuring no channel parameter
	[MIDI.SystemExclusive] = function(self, frames, forge, _, ...)
		--TODO
	end,
	[MIDI.QuarterFrame] = function(self, frames, forge, _, type, val)
		--TODO
	end,
	[MIDI.SongPosition] = function(self, frames, forge, _, lsb, msb) 
		--TODO
	end,
	[MIDI.SongSelect] = function(self, frames, forge, _, val)
		--TODO
	end,
	[MIDI.TuneRequest] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.Clock] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.Start] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.Continue] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.Stop] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.ActiveSense] = function(self, frames, forge)
		--TODO
	end,
	[MIDI.Reset] = function(self, frames, forge)
		--TODO
	end
}, not block)

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = midiR(frames, forge, atom) -- call responder for event
	end
end"""
	] .

moony:bank-template_part-2
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Template 2: Time Responder

-- define a TimeResponder object
local timeR = TimeResponder({
	[Time.speed] = function(self, frames, forge, speed)
		--TODO
	end,
	[Time.bar] = function(self, frames, forge, bar)
		--TODO
	end,
	[Time.barBeat] = function(self, frames, forge, barBeat)
		--TODO
	end,
	[Time.beatUnit] = function(self, frames, forge, beatUnit)
		--TODO
	end,
	[Time.beatsPerBar] = function(self, frames, forge, beatsPerBar)
		--TODO
	end,
	[Time.beatsPerMinute] = function(self, frames, forge, beatsPerMinute)
		--TODO
	end,
	[Time.framesPerSecond] = function(self, frames, forge, framesPerSecond)
		--TODO
	end,
	[Time.frame] = function(self, frames, forge, frame)
		--TODO
	end
})

-- push time responder state to stash
function stash(forge)
	timeR:stash(forge)
end

-- pop time responder state from stash
function apply(atom)
	timeR:apply(atom)
end

function run(n, control, notify, seq, forge)
	local from = 0 -- initial frame offset

	for to, atom in seq:foreach() do -- iterate over incoming events
		timeR(from, to, forge, atom) -- call responder for event

		from = to -- update to new frame offset
	end

	timeR(from, n, forge) -- call responder for remaining frames
end"""
	] .

moony:bank-template_part-3
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Template 3: OSC Responder

-- define an OSCResponder object
local oscR = OSCResponder({
	['/ping'] = function(self, frames, forge, fmt, ...)
		--TODO
	end,
	['/pong'] = function(self, frames, forge, fmt, ...)
		--TODO
	end
})

function run(n, control, notify, seq, forge)
	for frames, atom in seq:foreach() do -- iterate over incoming events
		local handled = oscR(frames, forge, atom) -- call responder for event
	end
end"""
	] .

moony:bank-template_part-4
	a pset:Preset ;
	doap:license lic:Artistic-2.0 ;
	state:state [
		moony:code """-- Template 4: State Responder

-- define URI prefix for state parameters
local urn = HashMap('urn:moony:template-4#')

-- define single parameter
local param = {
	[RDFS.label] = 'Awesome Parameter',
	[RDFS.comment] = 'does this and that...',
	[RDFS.range] = Atom.Int,
	[Core.minimum] = 0,
	[Core.maximum] = 10,
	[Units.unit] = Units.hz,
	[RDF.value] = 5
}

-- define a StateResponder object
local stateR = StateResponder({
	[Patch.readable] = {
		--TODO
	},
	[Patch.writable] = {
		[urn.param] = param -- register parameter to writable group
	}
})

-- push parameter values to disk
function save(forge)
	stateR:stash(forge)
end

-- pop parameter values from disk
function restore(atom)
	stateR:apply(atom)
end

-- register parameters to UI
function once(n, control, notify)
	stateR:register(0, notify)
end

function run(n, control, notify)
	for frames, atom in control:foreach() do -- iterate over incoming events
		local handled = stateR(frames, notify, atom)
	end
end"""
	] .
