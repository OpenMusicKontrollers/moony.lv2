# Copyright (c) 2015 Hanspeter Portner (dev@open-music-kontrollers.ch)
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the Artistic License 2.0 as published by
# The Perl Foundation.
#
# This source is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Artistic License 2.0 for more details.
#
# You should have received a copy of the Artistic License 2.0
# along the source as a COPYING file. If not, obtain it from
# http://www.perlfoundation.org/artistic_license_2_0.

@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix ui:   <http://lv2plug.in/ns/extensions/ui#> .
@prefix atom: <http://lv2plug.in/ns/ext/atom#> .
@prefix ui:   <http://lv2plug.in/ns/extensions/ui#> .
@prefix work: <http://lv2plug.in/ns/ext/worker#> .
@prefix midi: <http://lv2plug.in/ns/ext/midi#> .
@prefix time: <http://lv2plug.in/ns/ext/time#> .
@prefix state: <http://lv2plug.in/ns/ext/state#> .
@prefix patch: <http://lv2plug.in/ns/ext/patch#> .
@prefix pset:	<http://lv2plug.in/ns/ext/presets#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix rsz:  <http://lv2plug.in/ns/ext/resize-port#> .
@prefix bufsz: <http://lv2plug.in/ns/ext/buf-size#> .
@prefix urid: <http://lv2plug.in/ns/ext/urid#> .
@prefix kx:		<http://kxstudio.sf.net/ns/lv2ext/external-ui#> .

@prefix osc:  <http://open-music-kontrollers.ch/lv2/osc#> .
@prefix lic:	<http://opensource.org/licenses/> .
@prefix omk:	<http://open-music-kontrollers.ch/ventosus#> .
@prefix proj:	<http://open-music-kontrollers.ch/lv2/> .
@prefix moony:	<http://open-music-kontrollers.ch/lv2/moony#> .

osc:schedule
	a lv2:Feature .

osc:Event
	a rdfs:Class ;
	rdfs:subClassOf atom:Object ;
	rdfs:label "OSC Event (Bundle or Message)" .

# Maintainer
omk:me
	a foaf:Person ;
	foaf:name "Hanspeter Portner" ;
	foaf:mbox <mailto:dev@open-music-kontrollers.ch> ;
	foaf:homepage <http://open-music-kontrollers.ch> .

# Project
proj:moony
	a doap:Project ;
	doap:maintainer omk:me ;
	doap:name "Moony Bundle" .

# Common UI
moony:ui5_common_ui
	a ui:UI ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature ui:idleInterface, ui:portMap, urid:map ;
  lv2:extensionData ui:idleInterface, ui:showInterface .
moony:ui6_common_kx
	a kx:Widget ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature kx:Host, ui:portMap, urid:map .
moony:ui7_common_x11
	a ui:X11UI ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature ui:idleInterface, ui:portMap, urid:map ;
	lv2:optionalFeature ui:resize ;
  lv2:extensionData ui:idleInterface, ui:resize .
moony:ui8_common_eo
	a ui:EoUI ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:extensionData ui:resize ;
	lv2:optionalFeature ui:resize ;
	lv2:requiredFeature ui:idleInterface, ui:portMap, urid:map .

# Simple UI
moony:ui3_simple_ui
	a ui:UI ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature ui:idleInterface, ui:portMap, urid:map ;
  lv2:extensionData ui:idleInterface, ui:showInterface .
moony:ui4_simple_kx
	a kx:Widget ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature kx:Host, ui:portMap, urid:map .

# Web UI
moony:ui1_web_ui
	a ui:UI ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature ui:idleInterface, ui:portMap, urid:map ;
  lv2:extensionData ui:idleInterface, ui:showInterface .
moony:ui2_web_kx
	a kx:Widget ;
	ui:portNotification [
		ui:plugin moony:c1xc1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2xc2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4xc4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a1xa1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a2xa2 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:a4xa4 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c1a1xc1a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c2a1xc2a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] , [
		ui:plugin moony:c4a1xc4a1 ;
		lv2:symbol "notify" ;
		ui:protocol atom:eventTransfer ;
		ui:notifyType atom:Object ;
	] ;
	lv2:requiredFeature kx:Host, ui:portMap, urid:map .

# C1XC1 Plugin
moony:c1xc1
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C1 x C1" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input control ports
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 0 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
		lv2:default 0.0;
	] , [
	# output control ports
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 1 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 2 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 3 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;
	
	state:state [
		moony:code """function run(n, c1)
	return c1
end"""
	] .

# C2XC2 Plugin
moony:c2xc2
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C2 x C2" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input control ports
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 0 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
		lv2:default 0.0;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 1 ;
		lv2:symbol "input_2" ;
		lv2:name "Input 2" ;
		lv2:default 0.0;
	] , [
	# output control ports
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 2 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 3 ;
		lv2:symbol "output_2" ;
		lv2:name "Output 2" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 4 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 5 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;
	
	state:state [
		moony:code """function run(n, c1, c2)
	return c1, c2
end"""
	] .

# C4XC4 Plugin
moony:c4xc4
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C4 x C4" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input control ports
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 0 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
		lv2:default 0.0;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 1 ;
		lv2:symbol "input_2" ;
		lv2:name "Input 2" ;
		lv2:default 0.0;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 2 ;
		lv2:symbol "input_3" ;
		lv2:name "Input 3" ;
		lv2:default 0.0;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 3 ;
		lv2:symbol "input_4" ;
		lv2:name "Input 4" ;
		lv2:default 0.0;
	] , [
	# output control ports
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 4 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 5 ;
		lv2:symbol "output_2" ;
		lv2:name "Output 2" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 6 ;
		lv2:symbol "output_3" ;
		lv2:name "Output 3" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 7 ;
		lv2:symbol "output_4" ;
		lv2:name "Output 4" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 8 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 9 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;
	
	state:state [
		moony:code """function run(n, c1, c2, c3, c4)
	return c1, c2, c3, c4
end"""
	] .

# A1XA1 Plugin
moony:a1xa1
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony A1 x A1" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 2 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 3 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq, forge)
	for frames, atom in seq:foreach() do
		forge:time(frames):atom(atom)
	end
end"""
	] .

# A2XA2 Plugin
moony:a2xa2
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony A2 x A2" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_in_2" ;
		lv2:name "Event In 2" ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 2 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 3 ;
		lv2:symbol "event_out_2" ;
		lv2:name "Event Out 2" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 4 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 5 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq1, seq2, forge1, forge2)
	for frames, atom in seq1:foreach() do
		forge1:time(frames):atom(atom)
	end

	for frames, atom in seq2:foreach() do
		forge2:time(frames):atom(atom)
	end
end"""
	] .

# A4XA4 Plugin
moony:a4xa4
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony A4 x A4" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_in_2" ;
		lv2:name "Event In 2" ;
	] , [
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 2 ;
		lv2:symbol "event_in_3" ;
		lv2:name "Event In 3" ;
	] , [
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 3 ;
		lv2:symbol "event_in_4" ;
		lv2:name "Event In 4" ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 4 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 5 ;
		lv2:symbol "event_out_2" ;
		lv2:name "Event Out 2" ;
	] , [
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 6 ;
		lv2:symbol "event_out_3" ;
		lv2:name "Event Out 3" ;
	] , [
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 7 ;
		lv2:symbol "event_out_4" ;
		lv2:name "Event Out 4" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 8 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 9 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq1, seq2, seq3, seq4, forge1, forge2, forge3, forge4)
	for frames, atom in seq1:foreach() do
		forge1:time(frames):atom(atom)
	end

	for frames, atom in seq2:foreach() do
		forge2:time(frames):atom(atom)
	end

	for frames, atom in seq3:foreach() do
		forge3:time(frames):atom(atom)
	end

	for frames, atom in seq4:foreach() do
		forge4:time(frames):atom(atom)
	end
end"""
	] .

# C1A1XC1A1 Plugin
moony:c1a1xc1a1
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C1+A1 x C1+A1" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	# input port
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 2 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
	] , [
	# output port
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 3 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 4 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 5 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq, forge, c1)
	for frames, atom in seq:foreach() do
		forge:time(frames):atom(atom)
	end

	return c1
end"""
	] .

# C2A1XC2A1 Plugin
moony:c2a1xc2a1
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C2+A1 x C2+A1" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	# input port
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 2 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 3 ;
		lv2:symbol "input_2" ;
		lv2:name "Input 2" ;
	] , [
	# output port
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 4 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 5 ;
		lv2:symbol "output_2" ;
		lv2:name "Output 2" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 6 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 7 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq, forge, c1, c2)
	for frames, atom in seq:foreach() do
		forge:time(frames):atom(atom)
	end

	return c1, c2
end"""
	] .

# C4A1XC4A1 Plugin
moony:c4a1xc4a1
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Moony C4+A1 x C4+A1" ;
	doap:license lic:Artistic-2.0 ;
	rdfs:comment "Realtime Lua as programmable glue in LV2";
	lv2:project proj:moony ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState ;
	lv2:extensionData work:interface, state:interface ;
	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;

	lv2:port [
	# input event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in_1" ;
		lv2:name "Event In 1" ;
		lv2:designation lv2:control ;
	] , [
	# output event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out_1" ;
		lv2:name "Event Out 1" ;
		lv2:designation lv2:control ;
	] , [
	# input port
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 2 ;
		lv2:symbol "input_1" ;
		lv2:name "Input 1" ;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 3 ;
		lv2:symbol "input_2" ;
		lv2:name "Input 2" ;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 4 ;
		lv2:symbol "input_3" ;
		lv2:name "Input 3" ;
	] , [
	  a lv2:InputPort ,
			lv2:ControlPort ;
		lv2:index 5 ;
		lv2:symbol "input_4" ;
		lv2:name "Input 4" ;
	] , [
	# output port
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 6 ;
		lv2:symbol "output_1" ;
		lv2:name "Output 1" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 7 ;
		lv2:symbol "output_2" ;
		lv2:name "Output 2" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 8 ;
		lv2:symbol "output_3" ;
		lv2:name "Output 3" ;
	] , [
	  a lv2:OutputPort ,
			lv2:ControlPort ;
		lv2:index 9 ;
		lv2:symbol "output_4" ;
		lv2:name "Output 4" ;
	] , [
	# input control port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 10 ;
		lv2:symbol "control" ;
		lv2:name "Control" ;
		rsz:minimumSize 65536 ;
	] , [
	# output notify port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports atom:Object ;
		lv2:index 11 ;
		lv2:symbol "notify" ;
		lv2:name "Notify" ;
		rsz:minimumSize 65536 ;
	] ;

	state:state [
		moony:code """function run(n, seq, forge, c1, c2, c3, c4)
	for frames, atom in seq:foreach() do
		forge:time(frames):atom(atom)
	end

	return c1, c2, c3, c4
end"""
	] .

# Template banks
moony:bank-through
	a pset:Bank ;
	rdfs:label "Through bank" .
moony:bank-multiplex
	a pset:Bank ;
	rdfs:label "Multiplex bank" .
moony:bank-midi
	a pset:Bank ;
	rdfs:label "MIDI bank" .
moony:bank-osc
	a pset:Bank ;
	rdfs:label "OSC bank" .
moony:bank-time
	a pset:Bank ;
	rdfs:label "Time bank" .
moony:bank-state
	a pset:Bank ;
	rdfs:label "State bank" .

# Template presets
moony:bank-through_control-through
	a pset:Preset ;
	lv2:appliesTo moony:c1xc1 ;
	lv2:appliesTo moony:c2xc2 ;
	lv2:appliesTo moony:c4xc4 ;
	pset:bank moony:bank-through ;
	rdfs:label "Through" ;
	rdfs:seeAlso <presets.ttl> .

moony:bank-through_atom-through
	a pset:Preset ;
	lv2:appliesTo moony:a1xa1 ;
	lv2:appliesTo moony:c1a1xc1a1 ;
	lv2:appliesTo moony:c2a1xc2a1 ;
	lv2:appliesTo moony:c4a1xc4a1 ;
	pset:bank moony:bank-through ;
	rdfs:label "Through" ;
	rdfs:seeAlso <presets.ttl> .
moony:bank-midi_midi-responder
	a pset:Preset ;
	lv2:appliesTo moony:a1xa1 ;
	lv2:appliesTo moony:c1a1xc1a1 ;
	lv2:appliesTo moony:c2a1xc2a1 ;
	lv2:appliesTo moony:c4a1xc4a1 ;
	pset:bank moony:bank-midi ;
	rdfs:label "MIDI responder" ;
	rdfs:seeAlso <presets.ttl> .
moony:bank-time_midi-sequencer
	a pset:Preset ;
	lv2:appliesTo moony:a1xa1 ;
	lv2:appliesTo moony:c1a1xc1a1 ;
	lv2:appliesTo moony:c2a1xc2a1 ;
	lv2:appliesTo moony:c4a1xc4a1 ;
	pset:bank moony:bank-time ;
	rdfs:label "MIDI sequencer" ;
	rdfs:seeAlso <presets.ttl> .
moony:bank-osc_osc-responder
	a pset:Preset ;
	lv2:appliesTo moony:a1xa1 ;
	lv2:appliesTo moony:c1a1xc1a1 ;
	lv2:appliesTo moony:c2a1xc2a1 ;
	lv2:appliesTo moony:c4a1xc4a1 ;
	pset:bank moony:bank-osc ;
	rdfs:label "OSC responder" ;
	rdfs:seeAlso <presets.ttl> .

moony:bank-through_atom-through2
	a pset:Preset ;
	lv2:appliesTo moony:a2xa2 ;
	pset:bank moony:bank-through ;
	rdfs:label "Through" ;
	rdfs:seeAlso <presets.ttl> .
moony:bank-multiplex_atom-multiplex2
	a pset:Preset ;
	lv2:appliesTo moony:a2xa2 ;
	pset:bank moony:bank-multiplex ;
	rdfs:label "Multiplex" ;
	rdfs:seeAlso <presets.ttl> .

moony:bank-through_atom-through4
	a pset:Preset ;
	lv2:appliesTo moony:a4xa4 ;
	pset:bank moony:bank-through ;
	rdfs:label "Through" ;
	rdfs:seeAlso <presets.ttl> .
moony:bank-multiplex_atom-multiplex4
	a pset:Preset ;
	lv2:appliesTo moony:a4xa4 ;
	pset:bank moony:bank-multiplex ;
	rdfs:label "Multiplex" ;
	rdfs:seeAlso <presets.ttl> .

moony:bank-state_state-responder
	a pset:Preset ;
	lv2:appliesTo moony:a1xa1 ;
	pset:bank moony:bank-state ;
	rdfs:label "State responder" ;
	rdfs:seeAlso <presets.ttl> .
